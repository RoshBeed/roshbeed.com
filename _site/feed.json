{
    "version": "https://jsonfeed.org/version/1",
    "title": "Rosh Beed",
    "home_page_url": "http://0.0.0.0:4000/",
    "feed_url": "http://0.0.0.0:4000/feed.json",
    "description": "DevOps",
    "icon": "http://0.0.0.0:4000/img/favicon/apple-touch-icon.png",
    "favicon": "http://0.0.0.0:4000/img/favicon/favicon.ico",
    "expired": false,
    "items": [
    
        {
            "id": "http://0.0.0.0:4000/tech/2019/08/31/Raspberry-Pi-4-Network-Attached-Storage.html",
            "title": "Raspberry Pi 4 Network Attached Storage",
            "summary": null,
            "content_text": "I’m on a quest to find cost-effective ways to store my data. The offerings from cloud providers are enticing, but the subscription payment method can cost a lot over time. Pre-built NAS boxes another option, but they come with a high upfront cost. I decided to create a storage solution using a Raspberry Pi 4 and an SSD drive. In this post, learn how to store data in a centralised location within a local area network and access that data from other devices.Content  Raspberry Pi Setup  SSH Setup  NFS Server Setup  Disk Setup  NFS Client Setup  Software used  ConclusionRaspberry Pi SetupWe must install the Raspbian operating system and enable SSH onto the Raspberry Pi.Download latest Raspbian image$ wget https://downloads.raspberrypi.org/raspbian_lite_latestExtract the image$ unzip raspbian_lite_latestWrite image to our SD card# dd if=./*raspbian*.img of=/dev/sd&lt;XX&gt;Mount the boot partition from our SD card# mount /dev/sd&lt;X&gt;1 ./bootEnable SSH$ touch ./boot/sshUnmount boot partition$ umount ./bootClean up files no longer needed$ rm *raspbian*The SD card has been prepared. We have configured it start SSH.Insert the SD card into our Raspberry Pi and connect the power supply.SSH SetupSetup the SSH connection.$ ssh-keygen -q -t rsa -f $HOME/.ssh/id_rsa -P \"&lt;passphrase&gt;\"Copy SSH public key to Raspberry Pi$ ssh-copy-id pi@raspberrypi.localSSH into Raspberry Pi$ ssh pi@raspberrypi.localChange the default password to something secure# echo 'pi:&lt;newpassword&gt;' | chpasswdDisable SSH password authentication# grep -q \"^[^#]*PasswordAuthentication\" /etc/ssh/sshd_config &amp;&amp; sed -i \"/^[^#]*PasswordAuthentication[[:space:]]yes/c\\PasswordAuthentication no\" /etc/ssh/sshd_config || echo \"PasswordAuthentication no\" &gt;&gt; /etc/ssh/sshd_config# systemctl restart sshdDisk SetupWe need to format our disk drive and mount it before we can share it on the network.Format Disk to ext4# mkfs.ext4 /dev/sd&lt;X&gt;1Create NFS mountpoint# mkdir /media/nfsMount Disk# mount /dev/sd&lt;X&gt;1 /media/nfsMounting at boot# echo \"/dev/sd&lt;X&gt;1 /media/nfs ext4 defaults 0 0\" &gt;&gt; /etc/fstabNFS Server SetupNFS is a client/server application which allows us to share directories over the network.Install NFS server# apt-get update -y &amp;&amp; apt-get install nfs-kernel-serverAdd directory to /etc/exports# echo \"/media/nfs *(ro,all_squash,insecure)\" &gt;&gt; /etc/exportsRe-export changes# exportfs -arvNFS Client SetupInstall the components required for the NFS clientArch:# pacman -Syu nfs-utilsUbuntu:# apt-get install nfs-commonCreate a mountpoint# mkdir /media/nfs /media/nfsMount the NFS share on the client# mount raspberrypi.local:/media/nfs /media/nfsMounting at boot# echo \"raspberrypi.local:/media/nfs /media/nfs nfs defaults 0 0\" &gt;&gt; /etc/fstabSoftware used  nfs  sshConclusionThe latest Raspberry Pi now has USB 3 as well as Gigabit networking which is a vast improvement over the previous models. The ability to create high throughput network storage with Raspberry Pis is now possible.NFS is not fast by default. Optimisations can improve performance. Other protocols (e.g. rsync) may offer better performance.This was a quick tutorial on how to setup NFS. The next steps are to secure the  NFS share. Overall it was a successful project. It was cheaper than a pre-built NAS box.",
            "content_html": "<p>I’m on a quest to find cost-effective ways to store my data. The offerings from cloud providers are enticing, but the subscription payment method can cost a lot over time. Pre-built NAS boxes another option, but they come with a high upfront cost. I decided to create a storage solution using a Raspberry Pi 4 and an SSD drive. In this post, learn how to store data in a centralised location within a local area network and access that data from other devices.</p><h2 id=\"content\">Content</h2><ul>  <li><a href=\"#raspberry-pi-setup\">Raspberry Pi Setup</a></li>  <li><a href=\"#ssh-setup\">SSH Setup</a></li>  <li><a href=\"#nfs-server-setup\">NFS Server Setup</a></li>  <li><a href=\"#disk-setup\">Disk Setup</a></li>  <li><a href=\"#nfs-client-setup\">NFS Client Setup</a></li>  <li><a href=\"#software-used\">Software used</a></li>  <li><a href=\"#conclusion\">Conclusion</a></li></ul><h2 id=\"raspberry-pi-setup\">Raspberry Pi Setup</h2><p>We must install the Raspbian operating system and enable SSH onto the Raspberry Pi.</p><p>Download latest Raspbian image</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ wget https://downloads.raspberrypi.org/raspbian_lite_latest</code></pre></div></div><p>Extract the image</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ unzip raspbian_lite_latest</code></pre></div></div><p>Write image to our SD card</p><pre># dd if=./*raspbian*.img of=/dev/sd<b>&lt;XX&gt;</b></pre><p>Mount the boot partition from our SD card</p><pre># mount /dev/sd<b>&lt;X&gt;</b>1 ./boot</pre><p>Enable SSH</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ touch ./boot/ssh</code></pre></div></div><p>Unmount boot partition</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ umount ./boot</code></pre></div></div><p>Clean up files no longer needed</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ rm *raspbian*</code></pre></div></div><p>The SD card has been prepared. We have configured it start SSH.</p><p>Insert the SD card into our Raspberry Pi and connect the power supply.</p><h2 id=\"ssh-setup\">SSH Setup</h2><p>Setup the SSH connection.</p><pre>$ ssh-keygen -q -t rsa -f $HOME/.ssh/id_rsa -P \"<b>&lt;passphrase&gt;</b>\"</pre><p>Copy SSH public key to Raspberry Pi</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ ssh-copy-id pi@raspberrypi.local</code></pre></div></div><p>SSH into Raspberry Pi</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ ssh pi@raspberrypi.local</code></pre></div></div><p>Change the default password to something secure</p><pre># echo 'pi:<b>&lt;newpassword&gt;</b>' | chpasswd</pre><p>Disable SSH password authentication</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># grep -q \"^[^#]*PasswordAuthentication\" /etc/ssh/sshd_config &amp;&amp; sed -i \"/^[^#]*PasswordAuthentication[[:space:]]yes/c\\PasswordAuthentication no\" /etc/ssh/sshd_config || echo \"PasswordAuthentication no\" &gt;&gt; /etc/ssh/sshd_config# systemctl restart sshd</code></pre></div></div><h2 id=\"disk-setup\">Disk Setup</h2><p>We need to format our disk drive and mount it before we can share it on the network.</p><p>Format Disk to ext4</p><pre># mkfs.ext4 /dev/sd<b>&lt;X&gt;</b>1</pre><p>Create NFS mountpoint</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># mkdir /media/nfs</code></pre></div></div><p>Mount Disk</p><pre># mount /dev/sd<b>&lt;X&gt;</b>1 /media/nfs</pre><p>Mounting at boot</p><pre># echo \"/dev/sd<b>&lt;X&gt;</b>1 /media/nfs ext4 defaults 0 0\" &gt;&gt; /etc/fstab</pre><h2 id=\"nfs-server-setup\">NFS Server Setup</h2><p>NFS is a client/server application which allows us to share directories over the network.</p><p>Install NFS server</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># apt-get update -y &amp;&amp; apt-get install nfs-kernel-server</code></pre></div></div><p>Add directory to <code class=\"highlighter-rouge\">/etc/exports</code></p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># echo \"/media/nfs *(ro,all_squash,insecure)\" &gt;&gt; /etc/exports</code></pre></div></div><p>Re-export changes</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># exportfs -arv</code></pre></div></div><h2 id=\"nfs-client-setup\">NFS Client Setup</h2><p>Install the components required for the NFS client</p><p>Arch:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># pacman -Syu nfs-utils</code></pre></div></div><p>Ubuntu:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># apt-get install nfs-common</code></pre></div></div><p>Create a mountpoint</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># mkdir /media/nfs /media/nfs</code></pre></div></div><p>Mount the NFS share on the client</p><pre># mount raspberrypi.local:/media/nfs /media/nfs</pre><p>Mounting at boot</p><pre># echo \"raspberrypi.local:/media/nfs /media/nfs nfs defaults 0 0\" &gt;&gt; /etc/fstab</pre><h2 id=\"software-used\">Software used</h2><ul>  <li><a href=\"https://tools.ietf.org/html/rfc7530\">nfs</a></li>  <li><a href=\"https://www.openssh.com/\">ssh</a></li></ul><h2 id=\"conclusion\">Conclusion</h2><p>The latest Raspberry Pi now has USB 3 as well as Gigabit networking which is a vast improvement over the previous models. The ability to create high throughput network storage with Raspberry Pis is now possible.</p><p>NFS is not fast by default. Optimisations can improve performance. Other protocols (e.g. rsync) may offer better performance.</p><p>This was a quick tutorial on how to setup NFS. The next steps are to secure the  NFS share. Overall it was a successful project. It was cheaper than a pre-built NAS box.</p>",
            "url": "http://0.0.0.0:4000/tech/2019/08/31/Raspberry-Pi-4-Network-Attached-Storage.html",
            "image": "http://0.0.0.0:4000/img/Raspberry-Pi-Network-Attached-Storage/Raspberry-Pi-Network-Attached-Storage-1.png",
            
            
            "tags": ["nfs","linux","ssh","raspberry pi"],
            "date_published": "2019-08-31T00:00:00-05:00",
            "date_modified": "2019-08-31T00:00:00-05:00",
            "author": {
                "name": "Rosh Beedassee"
            }
        },
    
        {
            "id": "http://0.0.0.0:4000/tech/2019/08/18/Tiling-Window-Managers.html",
            "title": "Tiling Window Managers",
            "summary": null,
            "content_text": "Today we will delve into the realms of window management and discover new ways to organise windows. Today we will learn new things. Today we will learn about tiling window managers.Contents  Desktop Environments  Window Managers  List vs. Tree  Stacking Window Managers  Tiling Window Managers  ConclusionDesktop EnvironmentsHow do window managers work alongside other pieces of software?You have likely used a window manager as part of a group of applications known as a desktop environment.Before we look in-depth at window managers, let us have a brief overview of Desktop Environments  Package of applications to create a complete graphical environment          Windows Manager      Taskbar      Applications                  Terminal emulator          File manager          Text editor                      May also include          Application launcher      Clipboard manager      Desktop compositor      Desktop wallpaper setter and desktop icon      Display manager      Display power saving settings      Logout dialogue      Mount tool      Notification daemon      Polkit authentication agent      Screen locker      Sound volume manager      Default applications      Window ManagersWindow Managers control the placement and appearance of windows in a graphical user interface.  Draws graphical applications  Controls aspects of windows          Appearance      Placement      Border      Titlebar      Size      List vs. TreeStacking window managers utilise lists to draw windows in order. List-based tiling window managers use them to populate a predefined grid layout.Tree-based tiling window managers can have different layouts at each parent node. You can define horizontal or vertical splits and place windows wherever you wish.Stacking Window ManagersThe windows act like pieces of paper on a desk. They can be drawn anywhere on the screen. They can overlap.Tiling Window ManagersTiling window managers place windows in a grid where none of the windows can overlap.Here we have two windows horizontally split.The parent node has another window added to it.Two horizontal splits can achieve the same layout.Setting the parent node of windows 2 and 3 to a vertical split.ConclusionTiling window managers offer us a fast and efficient way to organise windows. Tree-based tiling window managers enable us to create custom layouts on-the-fly.Learning to master a tiling window manager is daunting. It requires a paradigm shift in your window management mindset. Your optimal keybindings may take countless iterations to perfect.Tiling window managers allow us to manage windows solely through the keyboard. Slowing down our workflow to use the mouse to organise windows is a thing of the past. Start using a tiling window manager today!",
            "content_html": "<p>Today we will delve into the realms of window management and discover new ways to organise windows. Today we will learn new things. Today we will learn about tiling window managers.</p><h2 id=\"contents\">Contents</h2><ul>  <li><a href=\"#desktop-environments\">Desktop Environments</a></li>  <li><a href=\"#window-managers\">Window Managers</a></li>  <li><a href=\"#list-vs-tree\">List vs. Tree</a></li>  <li><a href=\"#stacking-window-managers\">Stacking Window Managers</a></li>  <li><a href=\"#tiling-window-managers\">Tiling Window Managers</a></li>  <li><a href=\"#conclusion\">Conclusion</a></li></ul><h2 id=\"desktop-environments\">Desktop Environments</h2><p>How do window managers work alongside other pieces of software?</p><p>You have likely used a window manager as part of a group of applications known as a desktop environment.Before we look in-depth at window managers, let us have a brief overview of Desktop Environments</p><ul>  <li>Package of applications to create a complete graphical environment    <ul>      <li>Windows Manager</li>      <li>Taskbar</li>      <li>Applications        <ul>          <li>Terminal emulator</li>          <li>File manager</li>          <li>Text editor</li>        </ul>      </li>    </ul>  </li>  <li>May also include    <ul>      <li>Application launcher</li>      <li>Clipboard manager</li>      <li>Desktop compositor</li>      <li>Desktop wallpaper setter and desktop icon</li>      <li>Display manager</li>      <li>Display power saving settings</li>      <li>Logout dialogue</li>      <li>Mount tool</li>      <li>Notification daemon</li>      <li>Polkit authentication agent</li>      <li>Screen locker</li>      <li>Sound volume manager</li>      <li>Default applications</li>    </ul>  </li></ul><h2 id=\"window-managers\">Window Managers</h2><p>Window Managers control the placement and appearance of windows in a graphical user interface.</p><ul>  <li>Draws graphical applications</li>  <li>Controls aspects of windows    <ul>      <li>Appearance</li>      <li>Placement</li>      <li>Border</li>      <li>Titlebar</li>      <li>Size</li>    </ul>  </li></ul><h2 id=\"list-vs-tree\">List vs. Tree</h2><p>Stacking window managers utilise lists to draw windows in order. List-based tiling window managers use them to populate a predefined grid layout.</p><p>Tree-based tiling window managers can have different layouts at each parent node. You can define horizontal or vertical splits and place windows wherever you wish.</p><h2 id=\"stacking-window-managers\">Stacking Window Managers</h2><p>The windows act like pieces of paper on a desk. They can be drawn anywhere on the screen. They can overlap.</p><p><img src=\"/img/Tiling-Window-Managers/S6.png\" alt=\"\" /></p><h2 id=\"tiling-window-managers\">Tiling Window Managers</h2><p>Tiling window managers place windows in a grid where none of the windows can overlap.</p><p>Here we have two windows horizontally split.</p><p><img src=\"/img/Tiling-Window-Managers/H(2,1).png\" alt=\"\" /></p><p>The parent node has another window added to it.</p><p><img src=\"/img/Tiling-Window-Managers/H(3,2,1).png\" alt=\"\" /></p><p>Two horizontal splits can achieve the same layout.</p><p><img src=\"/img/Tiling-Window-Managers/H(3,H(2,1)).png\" alt=\"\" /></p><p>Setting the parent node of windows 2 and 3 to a vertical split.</p><p><img src=\"/img/Tiling-Window-Managers/H(3,V(2,1)).png\" alt=\"\" /></p><h2 id=\"conclusion\">Conclusion</h2><p>Tiling window managers offer us a fast and efficient way to organise windows. Tree-based tiling window managers enable us to create custom layouts on-the-fly.</p><p>Learning to master a tiling window manager is daunting. It requires a paradigm shift in your window management mindset. Your optimal keybindings may take countless iterations to perfect.</p><p>Tiling window managers allow us to manage windows solely through the keyboard. Slowing down our workflow to use the mouse to organise windows is a thing of the past. Start using a tiling window manager today!</p>",
            "url": "http://0.0.0.0:4000/tech/2019/08/18/Tiling-Window-Managers.html",
            "image": "http://0.0.0.0:4000/img/Tiling-Window-Managers/H(6,V(5,H(V(H(2,1),3),4))).png",
            
            
            
            "date_published": "2019-08-18T00:00:00-05:00",
            "date_modified": "2019-08-18T00:00:00-05:00",
            "author": {
                "name": "Rosh Beedassee"
            }
        },
    
        {
            "id": "http://0.0.0.0:4000/tech/2018/08/11/Raspberry-Pi-Password-Manager.html",
            "title": "Raspberry Pi Password Manager",
            "summary": null,
            "content_text": "As data breaches become increasingly common, securing our online accounts is more important than ever. Cloud-based password managers serve to free us from the need to remember passwords but what of those who don’t want to store their passwords online (or are excessively paranoid)? In this post, we will set up a Raspberry Pi 3 with Raspbian and a Git repository which we will use to store our passwords.We will use pass to manage our passwords.Once set up we will have the ability to access our password from any *nix operating system.Content  Raspberry Pi setup  Local machine setup  Secondary machine setup  Software used  ConclusionRaspberry Pi setupThis part documents how to install the Raspbian operating system, setup a SSH connection, create a Git repository and a little configuration to secure our device.Download latest Raspbian image$ wget https://downloads.raspberrypi.org/raspbian_lite_latestExtract the image$ unzip raspbian_lite_latestWrite image to our SD card# dd if=./*raspbian*.img of=/dev/sd&lt;XX&gt;Mount the boot partition from our SD card# mount /dev/sd&lt;X&gt;1 ./bootEnable SSH$ touch ./boot/sshSet Wi-Fi credentials$ echo \"network={\\n \\    ssid=\\\"&lt;your ssid&gt;\\\"\\n \\    psk=\\\"&lt;your password&gt;\\\"\\n \\}\" &gt; ./boot/wpa_supplicant.confUnmount boot partition$ umount ./bootClean up files no longer needed$ rm *raspbian*The SD card has been prepared. We have configured it to automatically connect to our Wi-Fi network and enabled SSH.It is time to insert the SD card into our Raspberry Pi and turn it on.The next step is to setup the SSH connection and Git repository.Generate SSH key pairssh-keygen -q -t rsa -f $HOME/.ssh/id_rsa -P \"&lt;passphrase&gt;\"Copy SSH public key to Raspberry Pi$ ssh-copy-id pi@raspberrypi.localSSH into Raspberry Pi$ ssh pi@raspberrypi.localChange the default password to something secure# echo 'pi:&lt;newpassword&gt;' | chpasswdDisable SSH password authentication$ sudo grep -q \"^[^#]*PasswordAuthentication\" /etc/ssh/sshd_config &amp;&amp; sed -i \"/^[^#]*PasswordAuthentication[[:space:]]yes/c\\PasswordAuthentication no\" /etc/ssh/sshd_config || echo \"PasswordAuthentication no\" &gt;&gt; /etc/ssh/sshd_config$ systemctl restart sshdInstall Git# apt-get update -y &amp;&amp; apt-get install git -yInitialise Git repository$ git init --bare ~/.password-storeLocal machine setupNow we will initialise the password store and push it to the repository we have created on the Raspberry Pi.Install gnupg and passThe command you need will differ depending on your distribution, e.g.:Arch:# pacman -Syu gnupg passUbuntu:# apt-get install gnupg passGPG setupCreate GPG keys$ cat &gt;foo &lt;&lt;EOF     Key-Type: default     Key-Length: 4096     Subkey-Type: default     Subkey-Length: 4096     Name-Real: &lt;John Doe&gt;     Name-Email: &lt;johndoe@example.com&gt;     Passphrase: &lt;passphrase&gt;     %commitEOF$ gpg --batch --generate-key foo$ rm fooExport the GPG key pair$ gpg --export-secret-keys --armor &lt;johndoe@example.com&gt; &gt; \\&lt;&lt;johndoe@example.com&gt;\\&gt;.gpg-secret$ gpg --export --armor &lt;johndoe@example.com&gt; &gt; \\&lt;&lt;johndoe@example.com&gt;\\&gt;.gpg-publicYou might want to look into using seperate siging keys for each device. This would make it easier to revoke a single key if you lose that device.Pass setupInitialise password store$ pass init &lt;johndoe@example.com&gt;Initialise Git repo$ pass git initAdd remote Raspberry Pi repository$ pass git remote add origin pi@raspberrypi.local:~/.password-storePush to Raspberry Pi repository$ pass git pushSecondary machine setupWe will learn how to use our password store on other devicesGenerate new SSH key pair for new machinessh-keygen -q -t rsa -f &lt;id_newmachine&gt; -P \"&lt;passphrase&gt;\"Copy public SSH key to Raspberry Pi$ ssh-copy-id -i &lt;id_newmachine&gt; pi@raspberry.localCopy private SSH key to new machine$ scp &lt;id_newmachine&gt; &lt;user@newmachine&gt;:~/.ssh/id_rsaCopy GPG key pair to new machine$ scp \\&lt;&lt;johndoe@example.com&gt;\\&gt;.gpg-&#42; &lt;user@newmachine&gt;:~/SSH into new machine$ ssh &lt;user@newmachine&gt;Import GPG keys$ gpg --import \\&lt;&lt;johndoe@example.com&gt;\\&gt;.gpg-public$ gpg --allow-secret-key-import \\&lt;&lt;johndoe@example.com&gt;\\&gt;.gpg-secretUse Git to clone password store from Raspberry Pi to our machine$ git clone ssh://pi@raspberry.local:~/password-storeYou should now be able to use pass in the same way as you do on your other machine.Software used  gpg  pass  git  sshConclusionYou can only push and pull passwords when on the same local network as the Raspberry Pi.You must pull your passwords when on your local network. You are able to use them while disconnected. If you add new passwords while disconnected you must join your local network to be able to push them to the Raspberry Pi.Here’s the  reason I chose not to expose my password store to the Internet: There could be undiscovered security bugs in the software used. If it is exposed to the the Internet and a bug is discovered, in the time between realising the issue and updating the software the passwords may be comprimisedIf you would like access to you password store over the internet you will need to forward ports on your router to allow access to your Raspberry Pi.In the next post we will look at how to use your password store on other operating system (Android &amp; Windows).",
            "content_html": "<p>As data breaches become increasingly common, securing our online accounts is more important than ever. Cloud-based password managers serve to free us from the need to remember passwords but what of those who don’t want to store their passwords online (or are excessively paranoid)? In this post, we will set up a Raspberry Pi 3 with Raspbian and a Git repository which we will use to store our passwords.</p><p>We will use pass to manage our passwords.</p><p>Once set up we will have the ability to access our password from any *nix operating system.</p><h2 id=\"content\">Content</h2><ul>  <li><a href=\"#raspberry-pi-setup\">Raspberry Pi setup</a></li>  <li><a href=\"#local-machine-setup\">Local machine setup</a></li>  <li><a href=\"#secondary-machine-setup\">Secondary machine setup</a></li>  <li><a href=\"#software-used\">Software used</a></li>  <li><a href=\"#conclusion\">Conclusion</a></li></ul><h2 id=\"raspberry-pi-setup\">Raspberry Pi setup</h2><p>This part documents how to install the Raspbian operating system, setup a SSH connection, create a Git repository and a little configuration to secure our device.</p><p>Download latest Raspbian image</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ wget https://downloads.raspberrypi.org/raspbian_lite_latest</code></pre></div></div><p>Extract the image</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ unzip raspbian_lite_latest</code></pre></div></div><p>Write image to our SD card</p><pre># dd if=./*raspbian*.img of=/dev/sd<b>&lt;XX&gt;</b></pre><p>Mount the boot partition from our SD card</p><pre># mount /dev/sd<b>&lt;X&gt;</b>1 ./boot</pre><p>Enable SSH</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ touch ./boot/ssh</code></pre></div></div><p>Set Wi-Fi credentials</p><pre>$ echo \"network={\\n \\    ssid=\\\"<b>&lt;your ssid&gt;</b>\\\"\\n \\    psk=\\\"<b>&lt;your password&gt;</b>\\\"\\n \\}\" &gt; ./boot/wpa_supplicant.conf</pre><p>Unmount boot partition</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ umount ./boot</code></pre></div></div><p>Clean up files no longer needed</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ rm *raspbian*</code></pre></div></div><p>The SD card has been prepared. We have configured it to automatically connect to our Wi-Fi network and enabled SSH.</p><p>It is time to insert the SD card into our Raspberry Pi and turn it on.</p><p>The next step is to setup the SSH connection and Git repository.</p><p>Generate SSH key pair</p><pre>ssh-keygen -q -t rsa -f $HOME/.ssh/id_rsa -P \"<b>&lt;passphrase&gt;</b>\"</pre><p>Copy SSH public key to Raspberry Pi</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ ssh-copy-id pi@raspberrypi.local</code></pre></div></div><p>SSH into Raspberry Pi</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ ssh pi@raspberrypi.local</code></pre></div></div><p>Change the default password to something secure</p><pre># echo 'pi:<b>&lt;newpassword&gt;</b>' | chpasswd</pre><p>Disable SSH password authentication</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ sudo grep -q \"^[^#]*PasswordAuthentication\" /etc/ssh/sshd_config &amp;&amp; sed -i \"/^[^#]*PasswordAuthentication[[:space:]]yes/c\\PasswordAuthentication no\" /etc/ssh/sshd_config || echo \"PasswordAuthentication no\" &gt;&gt; /etc/ssh/sshd_config$ systemctl restart sshd</code></pre></div></div><p>Install Git</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># apt-get update -y &amp;&amp; apt-get install git -y</code></pre></div></div><p>Initialise Git repository</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ git init --bare ~/.password-store</code></pre></div></div><h2 id=\"local-machine-setup\">Local machine setup</h2><p><img src=\"/img/Raspberry-Pi-Password-Manager/Raspberry-Pi-Password-Manager-2.png\" alt=\"Password Store\" title=\"Local machine setup\" /></p><p>Now we will initialise the password store and push it to the repository we have created on the Raspberry Pi.</p><p>Install gnupg and pass</p><p>The command you need will differ depending on your distribution, e.g.:</p><p>Arch:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># pacman -Syu gnupg pass</code></pre></div></div><p>Ubuntu:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># apt-get install gnupg pass</code></pre></div></div><h4 id=\"gpg-setup\">GPG setup</h4><p>Create GPG keys</p><pre>$ cat &gt;foo &lt;&lt;EOF     Key-Type: default     Key-Length: 4096     Subkey-Type: default     Subkey-Length: 4096     Name-Real: <b>&lt;John Doe&gt;</b>     Name-Email: <b>&lt;johndoe@example.com&gt;</b>     Passphrase: <b>&lt;passphrase&gt;</b>     %commitEOF$ gpg --batch --generate-key foo$ rm foo</pre><p>Export the GPG key pair</p><pre>$ gpg --export-secret-keys --armor <b>&lt;johndoe@example.com&gt;</b> &gt; \\&lt;<b>&lt;johndoe@example.com&gt;</b>\\&gt;.gpg-secret$ gpg --export --armor <b>&lt;johndoe@example.com&gt;</b> &gt; \\&lt;<b>&lt;johndoe@example.com&gt;</b>\\&gt;.gpg-public</pre><p>You might want to look into using seperate siging keys for each device. This would make it easier to revoke a single key if you lose that device.</p><h4 id=\"pass-setup\">Pass setup</h4><p>Initialise password store</p><pre>$ pass init <b>&lt;johndoe@example.com&gt;</b></pre><p>Initialise Git repo</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ pass git init</code></pre></div></div><p>Add remote Raspberry Pi repository</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ pass git remote add origin pi@raspberrypi.local:~/.password-store</code></pre></div></div><p>Push to Raspberry Pi repository</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ pass git push</code></pre></div></div><h2 id=\"secondary-machine-setup\">Secondary machine setup</h2><p>We will learn how to use our password store on other devices</p><p>Generate new SSH key pair for new machine</p><pre>ssh-keygen -q -t rsa -f <b>&lt;id_newmachine&gt;</b> -P \"<b>&lt;passphrase&gt;</b>\"</pre><p>Copy public SSH key to Raspberry Pi</p><pre>$ ssh-copy-id -i <b>&lt;id_newmachine&gt;</b> pi@raspberry.local</pre><p>Copy private SSH key to new machine</p><pre>$ scp <b>&lt;id_newmachine&gt;</b> <b>&lt;user@newmachine&gt;</b>:~/.ssh/id_rsa</pre><p>Copy GPG key pair to new machine</p><pre>$ scp \\&lt;<b>&lt;johndoe@example.com&gt;</b>\\&gt;.gpg-&#42; <b>&lt;user@newmachine&gt;:~/</b></pre><p>SSH into new machine</p><pre>$ ssh <b>&lt;user@newmachine&gt;</b></pre><p>Import GPG keys</p><pre>$ gpg --import \\&lt;<b>&lt;johndoe@example.com&gt;</b>\\&gt;.gpg-public$ gpg --allow-secret-key-import \\&lt;<b>&lt;johndoe@example.com&gt;</b>\\&gt;.gpg-secret</pre><p>Use Git to clone password store from Raspberry Pi to our machine</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ git clone ssh://pi@raspberry.local:~/password-store</code></pre></div></div><p>You should now be able to use pass in the same way as you do on your other machine.</p><h2 id=\"software-used\">Software used</h2><ul>  <li><a href=\"https://www.gnupg.org/\">gpg</a></li>  <li><a href=\"https://www.passwordstore.org/\">pass</a></li>  <li><a href=\"https://git-scm.com/\">git</a></li>  <li><a href=\"https://www.openssh.com/\">ssh</a></li></ul><h2 id=\"conclusion\">Conclusion</h2><p>You can only push and pull passwords when on the same local network as the Raspberry Pi.</p><p>You must pull your passwords when on your local network. You are able to use them while disconnected. If you add new passwords while disconnected you must join your local network to be able to push them to the Raspberry Pi.</p><p>Here’s the  reason I chose not to expose my password store to the Internet: There could be undiscovered security bugs in the software used. If it is exposed to the the Internet and a bug is discovered, in the time between realising the issue and updating the software the passwords may be comprimised</p><p>If you would like access to you password store over the internet you will need to forward ports on your router to allow access to your Raspberry Pi.</p><p>In the next post we will look at how to use your password store on other operating system (Android &amp; Windows).</p>",
            "url": "http://0.0.0.0:4000/tech/2018/08/11/Raspberry-Pi-Password-Manager.html",
            "image": "http://0.0.0.0:4000/img/Raspberry-Pi-Password-Manager/Raspberry-Pi-Password-Manager-1.jpg",
            
            
            "tags": ["gpg","pass","git","ssh"],
            "date_published": "2018-08-11T00:00:00-05:00",
            "date_modified": "2018-08-11T00:00:00-05:00",
            "author": {
                "name": "Rosh Beedassee"
            }
        },
    
        {
            "id": "http://0.0.0.0:4000/tech/2015/08/22/1TB-iPod-Classic-mod.html",
            "title": "1TB iPod Classic Mod",
            "summary": null,
            "content_text": "With the maximum size of an iPod classic at 160GB, I found myself quickly filling up the available storage with lossless FLAC files. I sought for a way to increase the storage capacity. In this post, I will go through the steps I took to upgrade my iPod to 1TB. I like to call it ‘The TeraPod’.In order to complete this you will need a few things:            mSATA SSD      ZIF to mSATA adapter                  I used the Samsung 840 EVO.      I used Tarken Akdam’s iFlash-Sata – mSata adapter                          Open your iPodYou will need to get inside your iPod. I would suggest using plastic opening tool so you do not damage your iPod. If you have purchased a replacement back panel then you can bend your one out of shape while getting it off more easily.Be careful of the battery cable! It’s pretty easy to rip the whole connector off.This is what you should see once you open your iPodRemoving the HDDFlip the hard drive down to reveal the connecting cableCarefully remove the connecting cableThe HDD has been removed!Connecting the SSDNow it’s time to do the reverse with an SSDPlug the connecter into the ZIF to mSATA adapter boardThere’s a few more things left to doClosing the iPodAttach the battery cableClose the iPod back upRestore iPod with iTunesConnect your iPod to your computer and open iTunes. Press Menu + Select for 10 to 15 seconds which will put your iPod in DFU mode. iTunes should detect your iPod and offer to restore it for you.Install RockBox (optional)If your iPod is not recognising all of the storage. It may be limited by the stock OS. You can install RockBox to overcome this limitation.RockBox also has a lot of new features that are not available in the stock OS and I recommend you check it out.ConclusionThe original HDD in the iPod draws 0.5A whereas the SSD draws 1.9A. Playback works great but I had issues copying songs onto the iPod: The load of hitting the SSD would drain the iPod’s battery completely before the songs had copied. I remedied this by preloading the bulk of my music using an mSATA to USB adapter, other workarounds include copying batches of songs and waiting for the battery to recharge. Another option would be to go with a ZIF to SD card adapter as they use less power.I also had problems with the battery connection on the motherboard breaking off after a few connection cycles. It was easy to find a replacement online but I found it difficult to solder on due to how small it was.",
            "content_html": "<p>With the maximum size of an iPod classic at 160GB, I found myself quickly filling up the available storage with lossless FLAC files. I sought for a way to increase the storage capacity. In this post, I will go through the steps I took to upgrade my iPod to 1TB. I like to call it ‘The TeraPod’.</p><p>In order to complete this you will need a few things:</p><table>  <thead>    <tr>      <th>mSATA SSD</th>      <th>ZIF to mSATA adapter</th>    </tr>  </thead>  <tbody>    <tr>      <td>I used the <a href=\"https://www.samsung.com/us/computer/memory-storage/MZ-MTE1T0BW-specs\">Samsung 840 EVO</a>.</td>      <td>I used Tarken Akdam’s <a href=\"http://www.tarkan.info/store/iflash-sata\">iFlash-Sata – mSata adapter</a></td>    </tr>    <tr>      <td><img src=\"/img/1TB-iPod-Classic-Mod/2-mSATASSD.jpg\" alt=\"\" /></td>      <td><img src=\"/img/1TB-iPod-Classic-Mod/3-ZIFtomSATAadapter.jpg\" alt=\"\" /></td>    </tr>  </tbody></table><h2 id=\"open-your-ipod\">Open your iPod</h2><p>You will need to get inside your iPod. I would suggest using plastic opening tool so you do not damage your iPod. If you have purchased a replacement back panel then you can bend your one out of shape while getting it off more easily.</p><p><img src=\"/img/1TB-iPod-Classic-Mod/4-OpenyouriPod.jpg\" alt=\"\" /></p><p>Be careful of the battery cable! It’s pretty easy to rip the whole connector off.</p><p><img src=\"/img/1TB-iPod-Classic-Mod/5-BatteryCable.jpg\" alt=\"\" /></p><p>This is what you should see once you open your iPod</p><p><img src=\"/img/1TB-iPod-Classic-Mod/6-Itsopen.jpg\" alt=\"\" /></p><h2 id=\"removing-the-hdd\">Removing the HDD</h2><p>Flip the hard drive down to reveal the connecting cable</p><p><img src=\"/img/1TB-iPod-Classic-Mod/7-RemovingtheHDD.jpg\" alt=\"\" /></p><p>Carefully remove the connecting cable</p><p><img src=\"/img/1TB-iPod-Classic-Mod/8-RemovingtheHDD.jpg\" alt=\"\" /></p><p>The HDD has been removed!</p><p><img src=\"/img/1TB-iPod-Classic-Mod/9-NoSpace.jpg\" alt=\"\" /></p><h2 id=\"connecting-the-ssd\">Connecting the SSD</h2><p>Now it’s time to do the reverse with an SSD</p><p><img src=\"/img/1TB-iPod-Classic-Mod/10-SSDSwap.jpg\" alt=\"\" /></p><p>Plug the connecter into the ZIF to mSATA adapter board</p><p><img src=\"/img/1TB-iPod-Classic-Mod/11-ConnectingtheSSD.jpg\" alt=\"\" /></p><p>There’s a few more things left to do</p><p><img src=\"/img/1TB-iPod-Classic-Mod/12-ConnectedtheSSD.jpg\" alt=\"\" /></p><h2 id=\"closing-the-ipod\">Closing the iPod</h2><p>Attach the battery cable</p><p><img src=\"/img/1TB-iPod-Classic-Mod/13-BatteryCable.jpg\" alt=\"\" /></p><p>Close the iPod back up</p><p><img src=\"/img/1TB-iPod-Classic-Mod/14-Almostdone.jpg\" alt=\"\" /></p><h2 id=\"restore-ipod-with-itunes\">Restore iPod with iTunes</h2><p>Connect your iPod to your computer and open iTunes. Press Menu + Select for 10 to 15 seconds which will put your iPod in DFU mode. iTunes should detect your iPod and offer to restore it for you.</p><p><img src=\"/img/1TB-iPod-Classic-Mod/15-RestoreiPodwithiTunes.jpg\" alt=\"\" /></p><h2 id=\"install-rockbox-optional\">Install RockBox (optional)</h2><p>If your iPod is not recognising all of the storage. It may be limited by the stock OS. You can install <a href=\"http://www.rockbox.org/\">RockBox</a> to overcome this limitation.RockBox also has a lot of new features that are not available in the stock OS and I recommend you check it out.</p><p><img src=\"/img/1TB-iPod-Classic-Mod/16-InstallRockBox(optional).jpg\" alt=\"\" /><img src=\"/img/1TB-iPod-Classic-Mod/17-930GB.jpg\" alt=\"\" /></p><h2 id=\"conclusion\">Conclusion</h2><p>The original HDD in the iPod draws 0.5A whereas the SSD draws 1.9A. Playback works great but I had issues copying songs onto the iPod: The load of hitting the SSD would drain the iPod’s battery completely before the songs had copied. I remedied this by preloading the bulk of my music using an mSATA to USB adapter, other workarounds include copying batches of songs and waiting for the battery to recharge. Another option would be to go with a ZIF to SD card adapter as they use less power.</p><p>I also had problems with the battery connection on the motherboard breaking off after a few connection cycles. It was easy to find a replacement online but I found it difficult to solder on due to how small it was.</p>",
            "url": "http://0.0.0.0:4000/tech/2015/08/22/1TB-iPod-Classic-mod.html",
            "image": "http://0.0.0.0:4000/img/1TB-iPod-Classic-Mod/1-The1TBiPodguide.jpg",
            
            
            "tags": ["ipod","mod","rockbox","linux"],
            "date_published": "2015-08-22T00:00:00-05:00",
            "date_modified": "2015-08-22T00:00:00-05:00",
            "author": {
                "name": "Rosh Beedassee"
            }
        }
    
    ]
}